"use strict";

export default class Flames {

   static configMeta = {
      params: {
         cooling: {
            type: 'number',
            description: 'Indicates how fast a flame cools down. More cooling means shorter flames.',
            default: 65,
            min: 1,
            maxRecommended: 150,
            max: 255
         },
         sparking: {
            type: 'number',
            description: 'Indicates the chance (out of 255) that a spark will ignite. A higher value makes the fire more active.',
            default: 50,
            min: 1,
            max: 255
         }
      }
   }

   #frame = [];
   #heat = [];

   #cooling = 0;
   #sparking = 0;

   constructor() {
      this.#cooling = Flames.configMeta.params.cooling.default;
      this.#sparking = Flames.configMeta.params.sparking.default;
   }

   setNumLeds(numLeds) {
      this.#frame = [];
      this.#heat = [];
      for (let i = 0; i < numLeds; i++) {
         this.#frame.push([255, 0, 0, 0]);
         this.#heat.push(0);
      }
   }

   setConfig(config) {
      this.#cooling = config.cooling ?? Flames.configMeta.params.cooling.default;
      this.#sparking = config.sparking ?? Flames.configMeta.params.sparking.default;
   }

   nextFrame() {

      const heat = this.#heat;
      const cooling = this.#cooling;
      const sparking = this.#sparking;
      const frame = this.#frame;

      // Step 1.  Cool down every cell a little
      for (let i = 0; i < frame.length; i++) {
         const cooldown = getRandomInt(((cooling * 10) / frame.length) + 2);
         heat[i] -= cooldown;
         if (heat[i] < 0) { heat[i] = 0; }
      }

      // Step 2.  Heat from each cell drifts 'up' and diffuses a little
      for (let i = frame.length; i >= 2; i--) {
         heat[i] = (heat[i - 1] + heat[i - 2] + heat[i - 2]) / 3;
         if (heat[i] > 255) { heat[i] = 255; }
      }

      // Step 3.  Randomly ignite new 'sparks' near the bottom
      if (getRandomInt(255) < sparking) {
         const y = getRandomInt(7);
         heat[y] += getRandomInt(95) + 160;
         if (heat[y] > 255) { heat[y] = 255; }
      }

      // Step 4.  Convert heat to LED colors
      for (let i = 0; i < frame.length; i++) {

         // Scale 'heat' down from 0-255 to 0-191
         const t192 = Math.round((heat[i] / 255.0) * 191);

         // calculate ramp up from
         let heatramp = t192 & 0x3F; // 0..63
         heatramp <<= 2; // scale up to 0..252

         // figure out which third of the spectrum we're in:
         if (t192 > 128) {                     // hottest
            frame[i] = [255, 255, 255, heatramp];
         } else if (t192 > 64) {             //  middle
            frame[i] = [255, 255, heatramp, 0];
         } else {
            frame[i] = [255, heatramp, 0, 0];// coolest
         }

      }

      return frame;
   }

}

function getRandomInt(maxExclusive) {
   return Math.floor(Math.random() * maxExclusive);
}